name: CI Pipeline

# Grant semantic-release permission to push tags/commits and create releases
permissions:
  contents: write      # for tags & commits
  issues: write        # for the fail plugin
  pull-requests: write
  id-token: write

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'
  release:
    types:
      - published

jobs:
  validate:
    name: Validate (lint & test)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm@10

      - name: Install dependencies
        run: pnpm install

  release:
    name: Release (semantic-release)
    needs: validate
    if: |
      github.event_name == 'push' && (
        github.ref == 'refs/heads/dev' ||
        startsWith(github.ref, 'refs/heads/release/') ||
        github.ref == 'refs/heads/main'
      )
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm@10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Semantic Release
        run: pnpm exec semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN:    ${{ secrets.NPM_TOKEN }}

  build:
    name: Build & Upload Artifacts
    needs: validate
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'release' && github.event.action == 'published')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm@10

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Tauri bundle
        run: pnpm exec tauri build

      - name: Publish Release and Upload Artifacts
        if: github.event_name == 'release'
        uses: ncipollo/release-action@v1
        with:
          artifacts: src-tauri/target/release/bundle/*
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ github.event.release.prerelease }}
